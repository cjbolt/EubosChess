package eubos.position;

import static org.junit.Assert.*;

import java.util.LinkedList;

import org.junit.Before;
import org.junit.Test;

import com.fluxchess.jcpi.models.GenericMove;
import com.fluxchess.jcpi.models.IllegalNotationException;

import eubos.board.InvalidPieceException;
import eubos.position.CastlingManager;
import eubos.position.PositionManager;

public class CastlingManagerTest {

	protected CastlingManager classUnderTest;
	private LinkedList<GenericMove> ml; 
	
	@Before
	public void setUp() {
		ml = new LinkedList<GenericMove>();
	}
	
	@Test
	public void test_WhiteKingSideCastle() throws IllegalNotationException{
		// 8 ........
		// 7 ........
		// 6 ........
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ....k..r
		//   abcdefgh
		classUnderTest = new PositionManager("8/8/8/8/8/8/8/4K2R w K - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		expectWkscMove();
	}
	
	@Test
	public void test_WhiteKingSideCastle_whenRookMoved() throws IllegalNotationException{
		// 8 k.......
		// 7 ........
		// 6 ........
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ....K..R
		//   abcdefgh
		PositionManager pm = new PositionManager("k7/8/8/8/8/8/8/4K2R w K - - -");
		try {
			pm.performMove(new GenericMove("h1h2"));
			pm.performMove(new GenericMove("a8b8"));
			pm.performMove(new GenericMove("h2h1"));
			pm.performMove(new GenericMove("b8a8"));
		} catch (InvalidPieceException e) {
			e.printStackTrace();
		}
		classUnderTest = pm.castling;	
		classUnderTest.addCastlingMoves(ml);
		assertTrue(ml.isEmpty());
	}
	
	@Test
	public void test_WhiteKingSideCastle_whenKingMoved() throws IllegalNotationException{
		// 8 k.......
		// 7 ........
		// 6 ........
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ....K..R
		//   abcdefgh
		PositionManager pm = new PositionManager("k7/8/8/8/8/8/8/4K2R w K - - -");
		try {
			pm.performMove(new GenericMove("e1e2"));
			pm.performMove(new GenericMove("a8b8"));
			pm.performMove(new GenericMove("e2e1"));
			pm.performMove(new GenericMove("b8a8"));
		} catch (InvalidPieceException e) {
			e.printStackTrace();
		}
		classUnderTest = pm.castling;	
		classUnderTest.addCastlingMoves(ml);
		assertTrue(ml.isEmpty());
	}	
	
	@Test
	public void test_wksc_fen_unavaill() throws IllegalNotationException{
		// 8 ........
		// 7 ........
		// 6 ........
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ....k..r
		//   abcdefgh
		classUnderTest = new PositionManager("8/8/8/8/8/8/8/4K2R w k - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		assertTrue(ml.isEmpty());
	}
	
	@Test
	public void test_WhiteKingSideCastle_Check() throws IllegalNotationException {
		// 8 ........
		// 7 ........
		// 6 ........
		// 5 ........
		// 4 ........
		// 3 ..B.....
		// 2 ........
		// 1 ....k..r
		//   abcdefgh
		classUnderTest = new PositionManager("8/8/8/8/8/2b5/8/4K2R w K - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		assertTrue(ml.isEmpty());
	}
	
	@Test
	public void test_WhiteKingSideCastle_MovesThroughCheckAtF1() {
		// 8 ........
		// 7 ........
		// 6 ........
		// 5 ........
		// 4 ........
		// 3 ...B....
		// 2 ........
		// 1 ....k..r
		//   abcdefgh
		classUnderTest = new PositionManager("8/8/8/8/8/3b4/8/4K2R w K - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		assertTrue(ml.isEmpty());
	}
	
	@Test
	public void test_WhiteKingSideCastle_MovesThroughCheckAtG1() {
		// 8 ........
		// 7 ........
		// 6 ........
		// 5 ........
		// 4 ........
		// 3 ....B...
		// 2 ........
		// 1 ....k..r
		//   abcdefgh
		classUnderTest = new PositionManager("8/8/8/8/8/4b3/8/4K2R w K - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		assertTrue(ml.isEmpty());
	}
	
	@Test
	public void test_WhiteKingSideCastle_BlockedOwnPieceAtF1() {
		// 8 ........
		// 7 ........
		// 6 ........
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ....kb.r
		//   abcdefgh
		classUnderTest = new PositionManager("8/8/8/8/8/8/8/4KB1R w K - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		assertTrue(ml.isEmpty());
	}
	
	@Test
	public void test_WhiteKingSideCastle_BlockedOwnPieceAtG1() {
		// 8 ........
		// 7 ........
		// 6 ........
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ....k.br
		//   abcdefgh
		classUnderTest = new PositionManager("8/8/8/8/8/8/8/4K1BR w K - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		assertTrue(ml.isEmpty());
	}	
	
	@Test
	public void test_WhiteKingSideCastle_RookIsAttackedAtH1() throws IllegalNotationException {
		// 8 ........
		// 7 ........
		// 6 ........
		// 5 ........
		// 4 ........
		// 3 .....B..
		// 2 ........
		// 1 ....k..r
		//   abcdefgh
		classUnderTest = new PositionManager("8/8/8/8/8/5b2/8/4K2R w K - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		expectWkscMove();
	}

	@Test
	public void test_BlackQueenSideCastle() throws IllegalNotationException  {
		// 8 R...K...
		// 7 ........
		// 6 ........
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ........
		//   abcdefgh
		classUnderTest = new PositionManager("r3k3/8/8/8/8/8/8/8 b q - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		expectBqscMove();
	}
	
	@Test
	public void test_BlackQueenSideCastle_Check() {
		// 8 R...K...
		// 7 ........
		// 6 ......b.
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ........
		//   abcdefgh
		classUnderTest = new PositionManager("r3k3/8/6B1/8/8/8/8/8 b q - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		assertTrue(ml.isEmpty());
	}
	
	@Test
	public void test_bqsc_fen_unavaill() {
		// 8 R...K...
		// 7 ........
		// 6 ......b.
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ........
		//   abcdefgh
		classUnderTest = new PositionManager("r3k3/8/8/8/8/8/8/8 b Q - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		assertTrue(ml.isEmpty());
	}
	
	@Test
	public void test_bqsc_fen_availl() throws IllegalNotationException {
		// 8 R...K...
		// 7 ........
		// 6 ......b.
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ........
		//   abcdefgh
		classUnderTest = new PositionManager("r3k3/8/8/8/8/8/8/8 b q - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		expectBqscMove();
	}	
	
	@Test
	public void test_BlackQueenSideCastle_MovesThroughCheckAtD8() {
		// 8 R...K...
		// 7 ........
		// 6 .....b..
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ........
		//   abcdefgh
		classUnderTest = new PositionManager("r3k3/8/5B2/8/8/8/8/8 b q - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		assertTrue(ml.isEmpty());
	}
		
	@Test
	public void test_BlackQueenSideCastle_MovesThroughCheckAtC8() {
		// 8 R...K...
		// 7 ........
		// 6 ....b...
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ........
		//   abcdefgh
		classUnderTest = new PositionManager("r3k3/8/4B3/8/8/8/8/8 b q - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		assertTrue(ml.isEmpty());
	}
	
	@Test
	public void test_BlackQueenSideCastle_BlockedOwnPieceAtD8() {
		// 8 R..QK...
		// 7 ........
		// 6 ........
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ........
		//   abcdefgh
		classUnderTest = new PositionManager("r2qk3/8/8/8/8/8/8/8 b q - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		assertTrue(ml.isEmpty());
	}
	
	@Test
	public void test_BlackQueenSideCastle_RookIsAttackedAtA8() throws IllegalNotationException  {
		// 8 R...K...
		// 7 ........
		// 6 R.......
		// 5 ........
		// 4 ........
		// 3 ........
		// 2 ........
		// 1 ........
		//   abcdefgh
		classUnderTest = new PositionManager("r3k3/8/R7/8/8/8/8/8 b q - - -").castling;
		classUnderTest.addCastlingMoves(ml);
		expectBqscMove();
	}
	
	@Test
	public void test_WhiteKingSideCastle_fromgame() throws IllegalNotationException  {
		classUnderTest = new PositionManager("rnb2bnr/1ppp1kpp/4pq2/8/p1BPP3/8/PPP2PPP/RNBQK2R w KQ - 1 7").castling;
		classUnderTest.addCastlingMoves(ml);
		expectWkscMove();
	}

	private void expectBqscMove() throws IllegalNotationException {
		GenericMove expectedMove = new GenericMove("e8c8");
		GenericMove qscMove = ml.get(0);
		assertTrue(qscMove != null);
		assertTrue(expectedMove.equals(qscMove));
	}
	
	private void expectWkscMove() throws IllegalNotationException {
		GenericMove expectedMove = new GenericMove("e1g1");
		GenericMove kscMove = ml.get(0);
		assertTrue(kscMove != null);
		assertTrue(expectedMove.equals(kscMove));
	}
}
