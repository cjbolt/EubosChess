package eubos.board;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class ParallelPstUpdateTest {
    public static final int NONE = 0x0;
    public static final int QUEEN = 0x1;
    public static final int ROOK = 0x2;
    public static final int BISHOP = 0x3;
    public static final int KNIGHT = 0x4;
    public static final int KING = 0x5;
    public static final int PAWN = 0x6;
    public static final int DONT_CARE = 0x7;
    
    public static final int BLACK = 0x8;
    public static final int COLOUR_BIT_SHIFT = 3;
    
    public static final int PIECE_NO_COLOUR_MASK = 0x7;
    public static final int PIECE_WHOLE_MASK = 0xf;

    public static final int WHITE_QUEEN = QUEEN;
    public static final int WHITE_BISHOP = BISHOP;
    public static final int WHITE_KING = KING;
    public static final int WHITE_KNIGHT = KNIGHT;
    public static final int WHITE_ROOK = ROOK;
    public static final int WHITE_PAWN = PAWN;
    
    public static final int BLACK_QUEEN = (BLACK|QUEEN);
    public static final int BLACK_BISHOP = (BLACK|BISHOP);
    public static final int BLACK_KING = (BLACK|KING);
    public static final int BLACK_KNIGHT = (BLACK|KNIGHT);
    public static final int BLACK_ROOK = (BLACK|ROOK);
    public static final int BLACK_PAWN = (BLACK|PAWN);
    public static final int PIECE_LENGTH = (BLACK|DONT_CARE);
        
    public static final short MATERIAL_VALUE_KING = 4000;
    public static final short MATERIAL_VALUE_QUEEN = 1800;
    public static final short MATERIAL_VALUE_ROOK = 900;
    public static final short MATERIAL_VALUE_BISHOP = 600;
    public static final short MATERIAL_VALUE_KNIGHT = 580;
    public static final short MATERIAL_VALUE_PAWN = 100;
    
    public static final short EG_MATERIAL_VALUE_KING = 4000;
    public static final short EG_MATERIAL_VALUE_QUEEN = 1560;
    public static final short EG_MATERIAL_VALUE_ROOK = 845;
    public static final short EG_MATERIAL_VALUE_BISHOP = 550;
    public static final short EG_MATERIAL_VALUE_KNIGHT = 520;
    public static final short EG_MATERIAL_VALUE_PAWN = 130;
    
    public static final short [][] PIECE_TO_MATERIAL_LUT;
    static {
        PIECE_TO_MATERIAL_LUT = new short [2][];
        
        PIECE_TO_MATERIAL_LUT[0] = new short [PIECE_LENGTH];
        PIECE_TO_MATERIAL_LUT[0][WHITE_QUEEN] = MATERIAL_VALUE_QUEEN;
        PIECE_TO_MATERIAL_LUT[0][WHITE_ROOK] = MATERIAL_VALUE_ROOK;
        PIECE_TO_MATERIAL_LUT[0][WHITE_BISHOP] = MATERIAL_VALUE_BISHOP;
        PIECE_TO_MATERIAL_LUT[0][WHITE_KNIGHT] = MATERIAL_VALUE_KNIGHT;
        PIECE_TO_MATERIAL_LUT[0][WHITE_KING] = MATERIAL_VALUE_KING;
        PIECE_TO_MATERIAL_LUT[0][WHITE_PAWN] = MATERIAL_VALUE_PAWN;
        
        PIECE_TO_MATERIAL_LUT[0][BLACK_QUEEN] = -MATERIAL_VALUE_QUEEN;
        PIECE_TO_MATERIAL_LUT[0][BLACK_ROOK] = -MATERIAL_VALUE_ROOK;
        PIECE_TO_MATERIAL_LUT[0][BLACK_BISHOP] = -MATERIAL_VALUE_BISHOP;
        PIECE_TO_MATERIAL_LUT[0][BLACK_KNIGHT] = -MATERIAL_VALUE_KNIGHT;
        PIECE_TO_MATERIAL_LUT[0][BLACK_KING] = -MATERIAL_VALUE_KING;
        PIECE_TO_MATERIAL_LUT[0][BLACK_PAWN] = -MATERIAL_VALUE_PAWN;
        
        PIECE_TO_MATERIAL_LUT[1] = new short [PIECE_LENGTH];
        PIECE_TO_MATERIAL_LUT[1][WHITE_QUEEN] = EG_MATERIAL_VALUE_QUEEN;
        PIECE_TO_MATERIAL_LUT[1][WHITE_ROOK] = EG_MATERIAL_VALUE_ROOK;
        PIECE_TO_MATERIAL_LUT[1][WHITE_BISHOP] = EG_MATERIAL_VALUE_BISHOP;
        PIECE_TO_MATERIAL_LUT[1][WHITE_KNIGHT] = EG_MATERIAL_VALUE_KNIGHT;
        PIECE_TO_MATERIAL_LUT[1][WHITE_KING] = EG_MATERIAL_VALUE_KING;
        PIECE_TO_MATERIAL_LUT[1][WHITE_PAWN] = EG_MATERIAL_VALUE_PAWN;
        
        PIECE_TO_MATERIAL_LUT[1][BLACK_QUEEN] = -EG_MATERIAL_VALUE_QUEEN;
        PIECE_TO_MATERIAL_LUT[1][BLACK_ROOK] = -EG_MATERIAL_VALUE_ROOK;
        PIECE_TO_MATERIAL_LUT[1][BLACK_BISHOP] = -EG_MATERIAL_VALUE_BISHOP;
        PIECE_TO_MATERIAL_LUT[1][BLACK_KNIGHT] = -EG_MATERIAL_VALUE_KNIGHT;
        PIECE_TO_MATERIAL_LUT[1][BLACK_KING] = -EG_MATERIAL_VALUE_KING;
        PIECE_TO_MATERIAL_LUT[1][BLACK_PAWN] = -EG_MATERIAL_VALUE_PAWN;
    }
    
    public static final int [] PIECE_PHASE;
    static {
        PIECE_PHASE = new int[PIECE_LENGTH];
        PIECE_PHASE[WHITE_QUEEN] = PIECE_PHASE[BLACK_QUEEN] = 640;
        PIECE_PHASE[WHITE_ROOK] = PIECE_PHASE[BLACK_ROOK] = 320;
        PIECE_PHASE[WHITE_BISHOP] = PIECE_PHASE[WHITE_KNIGHT] = PIECE_PHASE[BLACK_BISHOP] = PIECE_PHASE[BLACK_KNIGHT] = 192;
    }
    
    static final byte[] PAWN_WHITE_WEIGHTINGS;
    static {
        PAWN_WHITE_WEIGHTINGS = new byte[64];
        PAWN_WHITE_WEIGHTINGS[BitBoard.c3] = 0; PAWN_WHITE_WEIGHTINGS[BitBoard.d3] = 5; PAWN_WHITE_WEIGHTINGS[BitBoard.e3] = 5; PAWN_WHITE_WEIGHTINGS[BitBoard.f3] = 0;
        PAWN_WHITE_WEIGHTINGS[BitBoard.c4] = 3; PAWN_WHITE_WEIGHTINGS[BitBoard.d4] = 10; PAWN_WHITE_WEIGHTINGS[BitBoard.e4] = 10; PAWN_WHITE_WEIGHTINGS[BitBoard.f4] = 3;
    }
    
    static final byte[] PAWN_BLACK_WEIGHTINGS;
    static {
        PAWN_BLACK_WEIGHTINGS = new byte[64];
        PAWN_BLACK_WEIGHTINGS[BitBoard.c5] = 3; PAWN_BLACK_WEIGHTINGS[BitBoard.d5] = 10; PAWN_BLACK_WEIGHTINGS[BitBoard.e5] = 10; PAWN_BLACK_WEIGHTINGS[BitBoard.f5] = 3;
        PAWN_BLACK_WEIGHTINGS[BitBoard.c6] = 0; PAWN_BLACK_WEIGHTINGS[BitBoard.d6] = 5; PAWN_BLACK_WEIGHTINGS[BitBoard.e6] = 5; PAWN_BLACK_WEIGHTINGS[BitBoard.f6] = 0;
        for (int i=0;i<64;i++) {
            PAWN_BLACK_WEIGHTINGS[i] = (byte)-PAWN_BLACK_WEIGHTINGS[i];
        }
    }
    
    static final byte[] PAWN_WHITE_ENDGAME_WEIGHTINGS;
    static {
        PAWN_WHITE_ENDGAME_WEIGHTINGS = new byte[64];
        PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.a3] = 0; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.b3] = 0; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.c3] = 0; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.d3] = 5; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.e3] = 5; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.f3] = 0; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.g3] = 0; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.h3] = 0;
        PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.a4] = 0; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.b4] = 0; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.c4] = 3; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.d4] = 8; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.e4] = 8;PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.f4] = 3; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.g4] = 0; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.h4] = 0;
        PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.a5] = 2; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.b5] = 3; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.c5] = 8; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.d5] = 12; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.e5] = 12; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.f5] = 8; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.g5] = 3; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.h5] = 2;
        PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.a6] = 4; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.b6] = 8; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.c6] = 12; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.d6] = 16; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.e6] = 16; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.f6] = 12; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.g6] = 8; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.h6] = 4;
        PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.a7] = 5; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.b7] = 10; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.c7] = 15; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.d7] = 20; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.e7] = 20; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.f7] = 15; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.g7] = 10; PAWN_WHITE_ENDGAME_WEIGHTINGS[BitBoard.h7] = 5;
    }
    
    static final byte[] PAWN_BLACK_ENDGAME_WEIGHTINGS;
    static {
        PAWN_BLACK_ENDGAME_WEIGHTINGS = new byte[64];
        PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a2] = 5; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b2] = 10; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c2] = 15; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d2] = 20;PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e2] = 20;PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f2] = 15; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g2] = 10; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h2] = 5;
        PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a3] = 4; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b3] = 8; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c3] = 12; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d3] = 16;PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e3] = 16;PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f3] = 12; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g3] = 8; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h3] = 4;
        PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a4] = 2; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b4] = 3; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c4] = 8; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d4] = 12;PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e4] = 12;PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f4] = 8;PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g4] = 3; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h4] = 2;
        PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a5] = 0; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b5] = 0; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c5] = 3; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d5] = 8;PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e5] = 8;PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f5] = 3;PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g5] = 0; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h5] = 0;
        PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a6] = 0; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b6] = 0; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c6] = 0; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d6] = 5;PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e6] = 5;PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f6] = 0; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g6] = 0; PAWN_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h6] = 0;
        for (int i=0;i<64;i++) {
            PAWN_BLACK_ENDGAME_WEIGHTINGS[i] = (byte)-PAWN_BLACK_ENDGAME_WEIGHTINGS[i];
        }
    }  
    
    static final byte[] ROOK_WHITE_WEIGHTINGS;
    static {
        ROOK_WHITE_WEIGHTINGS = new byte[64];
        ROOK_WHITE_WEIGHTINGS[BitBoard.a1] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.b1] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.c1] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.d1] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.e1] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.f1] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.g1] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.h1] = 0;
        ROOK_WHITE_WEIGHTINGS[BitBoard.a2] = -10; ROOK_WHITE_WEIGHTINGS[BitBoard.b2] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.c2] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.d2] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.e2] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.f2] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.g2] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.h2] = -10;
        ROOK_WHITE_WEIGHTINGS[BitBoard.a3] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.b3] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.c3] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.d3] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.e3] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.f3] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.g3] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.h3] = 0;
        ROOK_WHITE_WEIGHTINGS[BitBoard.a4] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.b4] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.c4] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.d4] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.e4] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.f4] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.g4] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.h4] = 0;
        ROOK_WHITE_WEIGHTINGS[BitBoard.a5] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.b5] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.c5] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.d5] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.e5] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.f5] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.g5] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.h5] = 0;
        ROOK_WHITE_WEIGHTINGS[BitBoard.a6] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.b6] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.c6] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.d6] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.e6] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.f6] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.g6] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.h6] = 0;
        ROOK_WHITE_WEIGHTINGS[BitBoard.a7] = 20; ROOK_WHITE_WEIGHTINGS[BitBoard.b7] = 20; ROOK_WHITE_WEIGHTINGS[BitBoard.c7] = 20; ROOK_WHITE_WEIGHTINGS[BitBoard.d7] = 20; ROOK_WHITE_WEIGHTINGS[BitBoard.e7] = 20; ROOK_WHITE_WEIGHTINGS[BitBoard.f7] = 20; ROOK_WHITE_WEIGHTINGS[BitBoard.g7] = 20; ROOK_WHITE_WEIGHTINGS[BitBoard.h7] = 20;
        ROOK_WHITE_WEIGHTINGS[BitBoard.a8] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.b8] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.c8] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.d8] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.e8] = 5; ROOK_WHITE_WEIGHTINGS[BitBoard.f8] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.g8] = 0; ROOK_WHITE_WEIGHTINGS[BitBoard.h8] = 0;
    }
    
    static final byte[] ROOK_BLACK_WEIGHTINGS;
    static {
        ROOK_BLACK_WEIGHTINGS = new byte[64];
        ROOK_BLACK_WEIGHTINGS[BitBoard.a1] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.b1] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.c1] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.d1] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.e1] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.f1] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.g1] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.h1] = 0;
        ROOK_BLACK_WEIGHTINGS[BitBoard.a2] = 20; ROOK_BLACK_WEIGHTINGS[BitBoard.b2] = 20; ROOK_BLACK_WEIGHTINGS[BitBoard.c2] = 20; ROOK_BLACK_WEIGHTINGS[BitBoard.d2] = 20; ROOK_BLACK_WEIGHTINGS[BitBoard.e2] = 20; ROOK_BLACK_WEIGHTINGS[BitBoard.f2] = 20; ROOK_BLACK_WEIGHTINGS[BitBoard.g2] = 20; ROOK_BLACK_WEIGHTINGS[BitBoard.h2] = 20;
        ROOK_BLACK_WEIGHTINGS[BitBoard.a3] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.b3] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.c3] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.d3] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.e3] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.f3] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.g3] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.h3] = 0;
        ROOK_BLACK_WEIGHTINGS[BitBoard.a4] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.b4] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.c4] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.d4] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.e4] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.f4] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.g4] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.h4] = 0;
        ROOK_BLACK_WEIGHTINGS[BitBoard.a5] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.b5] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.c5] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.d5] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.e5] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.f5] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.g5] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.h5] = 0;
        ROOK_BLACK_WEIGHTINGS[BitBoard.a6] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.b6] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.c6] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.d6] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.e6] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.f6] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.g6] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.h6] = 0;
        ROOK_BLACK_WEIGHTINGS[BitBoard.a7] = -10; ROOK_BLACK_WEIGHTINGS[BitBoard.b7] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.c7] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.d7] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.e7] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.f7] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.g7] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.h7] = -10;
        ROOK_BLACK_WEIGHTINGS[BitBoard.a8] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.b8] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.c8] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.d8] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.e8] = 5; ROOK_BLACK_WEIGHTINGS[BitBoard.f8] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.g8] = 0; ROOK_BLACK_WEIGHTINGS[BitBoard.h8] = 0;
        for (int i=0;i<64;i++) {
            ROOK_BLACK_WEIGHTINGS[i] = (byte)-ROOK_BLACK_WEIGHTINGS[i];
        }
    }
    
    static final byte[] KNIGHT_WHITE_WEIGHTINGS;
    static {
        KNIGHT_WHITE_WEIGHTINGS = new byte[64];
        KNIGHT_WHITE_WEIGHTINGS[BitBoard.a1] = -20;KNIGHT_WHITE_WEIGHTINGS[BitBoard.b1] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.c1] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.d1] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.e1] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.f1] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.g1] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.h1] = -20;
        KNIGHT_WHITE_WEIGHTINGS[BitBoard.a2] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.b2] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.c2] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.d2] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.e2] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.f2] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.g2] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.h2] = -10;
        KNIGHT_WHITE_WEIGHTINGS[BitBoard.a3] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.b3] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.c3] = 10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.d3] = 10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.e3] = 10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.f3] = 10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.g3] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.h3] = -10;
        KNIGHT_WHITE_WEIGHTINGS[BitBoard.a4] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.b4] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.c4] = 10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.d4] = 20;KNIGHT_WHITE_WEIGHTINGS[BitBoard.e4] = 20;KNIGHT_WHITE_WEIGHTINGS[BitBoard.f4] = 10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.g4] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.h4] = -10;
        KNIGHT_WHITE_WEIGHTINGS[BitBoard.a5] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.b5] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.c5] = 10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.d5] = 20;KNIGHT_WHITE_WEIGHTINGS[BitBoard.e5] = 20;KNIGHT_WHITE_WEIGHTINGS[BitBoard.f5] = 10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.g5] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.h5] = -10;
        KNIGHT_WHITE_WEIGHTINGS[BitBoard.a6] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.b6] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.c6] = 10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.d6] = 10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.e6] = 10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.f6] = 10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.g6] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.h6] = -10;
        KNIGHT_WHITE_WEIGHTINGS[BitBoard.a7] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.b7] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.c7] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.d7] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.e7] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.f7] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.g7] = 0;KNIGHT_WHITE_WEIGHTINGS[BitBoard.h7] = -10;
        KNIGHT_WHITE_WEIGHTINGS[BitBoard.a8] = -20;KNIGHT_WHITE_WEIGHTINGS[BitBoard.b8] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.c8] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.d8] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.e8] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.f8] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.g8] = -10;KNIGHT_WHITE_WEIGHTINGS[BitBoard.h8] = -20;
    }
    
    static final byte[] KNIGHT_BLACK_WEIGHTINGS;
    static {
        KNIGHT_BLACK_WEIGHTINGS = new byte[64];
        KNIGHT_BLACK_WEIGHTINGS[BitBoard.a1] = -20;KNIGHT_BLACK_WEIGHTINGS[BitBoard.b1] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.c1] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.d1] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.e1] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.f1] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.g1] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.h1] = -20;
        KNIGHT_BLACK_WEIGHTINGS[BitBoard.a2] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.b2] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.c2] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.d2] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.e2] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.f2] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.g2] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.h2] = -10;
        KNIGHT_BLACK_WEIGHTINGS[BitBoard.a3] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.b3] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.c3] = 10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.d3] = 10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.e3] = 10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.f3] = 10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.g3] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.h3] = -10;
        KNIGHT_BLACK_WEIGHTINGS[BitBoard.a4] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.b4] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.c4] = 10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.d4] = 20;KNIGHT_BLACK_WEIGHTINGS[BitBoard.e4] = 20;KNIGHT_BLACK_WEIGHTINGS[BitBoard.f4] = 10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.g4] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.h4] = -10;
        KNIGHT_BLACK_WEIGHTINGS[BitBoard.a5] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.b5] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.c5] = 10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.d5] = 20;KNIGHT_BLACK_WEIGHTINGS[BitBoard.e5] = 20;KNIGHT_BLACK_WEIGHTINGS[BitBoard.f5] = 10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.g5] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.h5] = -10;
        KNIGHT_BLACK_WEIGHTINGS[BitBoard.a6] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.b6] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.c6] = 10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.d6] = 10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.e6] = 10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.f6] = 10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.g6] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.h6] = -10;
        KNIGHT_BLACK_WEIGHTINGS[BitBoard.a7] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.b7] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.c7] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.d7] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.e7] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.f7] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.g7] = 0;KNIGHT_BLACK_WEIGHTINGS[BitBoard.h7] = -10;
        KNIGHT_BLACK_WEIGHTINGS[BitBoard.a8] = -20;KNIGHT_BLACK_WEIGHTINGS[BitBoard.b8] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.c8] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.d8] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.e8] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.f8] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.g8] = -10;KNIGHT_BLACK_WEIGHTINGS[BitBoard.h8] = -20;
        for (int i=0;i<64;i++) {
            KNIGHT_BLACK_WEIGHTINGS[i] = (byte)-KNIGHT_BLACK_WEIGHTINGS[i];
        }
    }
    
    static final byte[] KING_WHITE_ENDGAME_WEIGHTINGS;
    static {
        KING_WHITE_ENDGAME_WEIGHTINGS = new byte[64];
        KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.a1] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.b1] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.c1] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.d1] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.e1] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.f1] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.g1] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.h1] = -30;
        KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.a2] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.b2] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.c2] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.d2] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.e2] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.f2] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.g2] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.h2] = -30;
        KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.a3] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.b3] = -10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.c3] = 0;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.d3] = 10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.e3] = 10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.f3] = 0;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.g3] = -10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.h3] = -30;
        KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.a4] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.b4] = -10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.c4] = 10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.d4] = 20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.e4] = 20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.f4] = 10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.g4] = -10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.h4] = -20;
        KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.a5] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.b5] = -10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.c5] = 10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.d5] = 20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.e5] = 20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.f5] = 10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.g5] = -10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.h5] = -20;
        KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.a6] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.b6] = -10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.c6] = 0;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.d6] = 10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.e6] = 10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.f6] = 0;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.g6] = -10;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.h6] = -30;
        KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.a7] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.b7] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.c7] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.d7] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.e7] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.f7] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.g7] = -20;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.h7] = -30;
        KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.a8] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.b8] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.c8] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.d8] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.e8] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.f8] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.g8] = -30;KING_WHITE_ENDGAME_WEIGHTINGS[BitBoard.h8] = -30;
    }
    
    static final byte[] KING_WHITE_MIDGAME_WEIGHTINGS;
    static {
        KING_WHITE_MIDGAME_WEIGHTINGS = new byte[64];
        KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.a1] = 5;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.b1] = 25;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.c1] = 50;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.d1] = 0;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.e1] = 0;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.f1] = 5;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.g1] = 50;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.h1] = 5;
        KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.a2] = 0;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.b2] = -10;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.c2] = -10;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.d2] = -10;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.e2] = -10;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.f2] = -10;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.g2] = -10;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.h2] = -10;
        KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.a3] = -20;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.b3] = -20;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.c3] = -30;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.d3] = -30;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.e3] = -30;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.f3] = -30;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.g3] = -20;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.h3] = -20;
        KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.a4] = -30;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.b4] = -40;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.c4] = -50;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.d4] = -50;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.e4] = -50;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.f4] = -40;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.g4] = -40;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.h4] = -30;
        KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.a5] = -30;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.b5] = -40;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.c5] = -50;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.d5] = -50;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.e5] = -50;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.f5] = -40;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.g5] = -40;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.h5] = -30;
        KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.a6] = -20;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.b6] = -20;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.c6] = -30;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.d6] = -30;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.e6] = -30;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.f6] = -30;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.g6] = -20;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.h6] = -20;
        KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.a7] = -10;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.b7] = -10;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.c7] = -10;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.d7] = -10;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.e7] = -10;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.f7] = -10;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.g7] = -10;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.h7] = -10;
        KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.a8] = 5;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.b8] = 25;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.c8] = 50;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.d8] = 0;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.e8] = 0;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.f8] = 5;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.g8] = 50;KING_WHITE_MIDGAME_WEIGHTINGS[BitBoard.h8] = 5;
    }
    
    static final byte[] KING_BLACK_ENDGAME_WEIGHTINGS;
    static {
        KING_BLACK_ENDGAME_WEIGHTINGS = new byte[64];
        KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a1] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b1] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c1] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d1] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e1] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f1] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g1] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h1] = -30;
        KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a2] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b2] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c2] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d2] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e2] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f2] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g2] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h2] = -30;
        KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a3] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b3] = -10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c3] = 0;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d3] = 10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e3] = 10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f3] = 0;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g3] = -10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h3] = -30;
        KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a4] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b4] = -10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c4] = 10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d4] = 20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e4] = 20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f4] = 10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g4] = -10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h4] = -20;
        KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a5] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b5] = -10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c5] = 10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d5] = 20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e5] = 20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f5] = 10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g5] = -10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h5] = -20;
        KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a6] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b6] = -10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c6] = 0;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d6] = 10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e6] = 10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f6] = 0;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g6] = -10;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h6] = -30;
        KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a7] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b7] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c7] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d7] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e7] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f7] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g7] = -20;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h7] = -30;
        KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h8] = -30;
        for (int i=0;i<64;i++) {
            KING_BLACK_ENDGAME_WEIGHTINGS[i] = (byte)-KING_BLACK_ENDGAME_WEIGHTINGS[i];
        }
    }
    
    static final byte[] KING_BLACK_MIDGAME_WEIGHTINGS;
    static {
        KING_BLACK_MIDGAME_WEIGHTINGS = new byte[64];
        KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.a1] = 5;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.b1] = 25;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.c1] = 50;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.d1] = 0;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.e1] = 0;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.f1] = 5;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.g1] = 50;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.h1] = 5;
        KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.a2] = 0;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.b2] = -10;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.c2] = -10;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.d2] = -10;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.e2] = -10;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.f2] = -10;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.g2] = -10;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.h2] = -10;
        KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.a3] = -20;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.b3] = -20;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.c3] = -30;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.d3] = -30;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.e3] = -30;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.f3] = -30;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.g3] = -20;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.h3] = -20;
        KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.a4] = -30;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.b4] = -40;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.c4] = -50;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.d4] = -50;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.e4] = -50;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.f4] = -40;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.g4] = -40;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.h4] = -30;
        KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.a5] = -30;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.b5] = -40;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.c5] = -50;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.d5] = -50;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.e5] = -50;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.f5] = -40;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.g5] = -40;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.h5] = -30;
        KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.a6] = -20;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.b6] = -20;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.c6] = -30;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.d6] = -30;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.e6] = -30;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.f6] = -30;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.g6] = -20;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.h6] = -20;
        KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.a7] = -10;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.b7] = -10;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.c7] = -10;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.d7] = -10;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.e7] = -10;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.f7] = -10;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.g7] = -10;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.h7] = -10;
        KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.a8] = 5;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.b8] = 25;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.c8] = 50;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.d8] = 0;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.e8] = 0;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.f8] = 5;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.g8] = 50;KING_BLACK_MIDGAME_WEIGHTINGS[BitBoard.h8] = 5;
        KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.a8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.b8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.c8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.d8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.e8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.f8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.g8] = -30;KING_BLACK_ENDGAME_WEIGHTINGS[BitBoard.h8] = -30;
        for (int i=0;i<64;i++) {
            KING_BLACK_MIDGAME_WEIGHTINGS[i] = (byte)-KING_BLACK_MIDGAME_WEIGHTINGS[i];
        }
    }
    
    static final byte[] ZERO_WEIGHTING = new byte[64];
    
    static final byte [][] PIECE_SQUARE_TABLES;
    static {
        PIECE_SQUARE_TABLES = new byte[15][64];
        
        PIECE_SQUARE_TABLES[Piece.WHITE_PAWN] = PAWN_WHITE_WEIGHTINGS;
        PIECE_SQUARE_TABLES[Piece.WHITE_KING] = KING_WHITE_MIDGAME_WEIGHTINGS;
        PIECE_SQUARE_TABLES[Piece.WHITE_QUEEN] = ZERO_WEIGHTING;
        PIECE_SQUARE_TABLES[Piece.WHITE_ROOK] = ROOK_WHITE_WEIGHTINGS;
        PIECE_SQUARE_TABLES[Piece.WHITE_BISHOP] = ZERO_WEIGHTING;
        PIECE_SQUARE_TABLES[Piece.WHITE_KNIGHT] = KNIGHT_WHITE_WEIGHTINGS;
        
        PIECE_SQUARE_TABLES[Piece.BLACK_PAWN] = PAWN_BLACK_WEIGHTINGS;
        PIECE_SQUARE_TABLES[Piece.BLACK_KING] = KING_BLACK_MIDGAME_WEIGHTINGS;
        PIECE_SQUARE_TABLES[Piece.BLACK_QUEEN] = ZERO_WEIGHTING;
        PIECE_SQUARE_TABLES[Piece.BLACK_ROOK] = ROOK_BLACK_WEIGHTINGS;
        PIECE_SQUARE_TABLES[Piece.BLACK_BISHOP] = ZERO_WEIGHTING;
        PIECE_SQUARE_TABLES[Piece.BLACK_KNIGHT] = KNIGHT_BLACK_WEIGHTINGS;
    }
    
    static final byte [][] ENDGAME_PIECE_SQUARE_TABLES;
    static {
        ENDGAME_PIECE_SQUARE_TABLES = new byte[15][128];
        
        ENDGAME_PIECE_SQUARE_TABLES[Piece.WHITE_PAWN] = PAWN_WHITE_ENDGAME_WEIGHTINGS;
        ENDGAME_PIECE_SQUARE_TABLES[Piece.WHITE_KING] = KING_WHITE_ENDGAME_WEIGHTINGS;
        ENDGAME_PIECE_SQUARE_TABLES[Piece.WHITE_QUEEN] = ZERO_WEIGHTING;
        ENDGAME_PIECE_SQUARE_TABLES[Piece.WHITE_ROOK] = ZERO_WEIGHTING;
        ENDGAME_PIECE_SQUARE_TABLES[Piece.WHITE_BISHOP] = ZERO_WEIGHTING;
        ENDGAME_PIECE_SQUARE_TABLES[Piece.WHITE_KNIGHT] = KNIGHT_WHITE_WEIGHTINGS;
        
        ENDGAME_PIECE_SQUARE_TABLES[Piece.BLACK_PAWN] = PAWN_BLACK_ENDGAME_WEIGHTINGS;
        ENDGAME_PIECE_SQUARE_TABLES[Piece.BLACK_KING] = KING_BLACK_ENDGAME_WEIGHTINGS;
        ENDGAME_PIECE_SQUARE_TABLES[Piece.BLACK_QUEEN] = ZERO_WEIGHTING;
        ENDGAME_PIECE_SQUARE_TABLES[Piece.BLACK_ROOK] = ZERO_WEIGHTING;
        ENDGAME_PIECE_SQUARE_TABLES[Piece.BLACK_BISHOP] = ZERO_WEIGHTING;
        ENDGAME_PIECE_SQUARE_TABLES[Piece.BLACK_KNIGHT] = KNIGHT_BLACK_WEIGHTINGS;
    }
    
    static int [] createCombinedTable(byte [] mg_table, byte[] eg_table) {
    	int [] combined_table = new int [64];
    	for (int i=0; i < 64; i++) {
    		int mg = mg_table[i];
    		int eg = eg_table[i];
    		combined_table[i] = (mg | (eg << 16));
    	}
    	return combined_table;
    }
    
    static final int [][] COMBINED_PIECE_SQUARE_TABLES;
    static {
    	COMBINED_PIECE_SQUARE_TABLES = new int[15][64];
        
    	COMBINED_PIECE_SQUARE_TABLES[Piece.WHITE_PAWN] = createCombinedTable(PAWN_WHITE_WEIGHTINGS, PAWN_WHITE_ENDGAME_WEIGHTINGS);
    	COMBINED_PIECE_SQUARE_TABLES[Piece.WHITE_KING] = createCombinedTable(KING_WHITE_MIDGAME_WEIGHTINGS, KING_WHITE_ENDGAME_WEIGHTINGS);
    	COMBINED_PIECE_SQUARE_TABLES[Piece.WHITE_QUEEN] = createCombinedTable(ZERO_WEIGHTING, ZERO_WEIGHTING);
    	COMBINED_PIECE_SQUARE_TABLES[Piece.WHITE_ROOK] = createCombinedTable(ROOK_WHITE_WEIGHTINGS, ZERO_WEIGHTING);
    	COMBINED_PIECE_SQUARE_TABLES[Piece.WHITE_BISHOP] = createCombinedTable(ZERO_WEIGHTING, ZERO_WEIGHTING);
    	COMBINED_PIECE_SQUARE_TABLES[Piece.WHITE_KNIGHT] = createCombinedTable(KNIGHT_WHITE_WEIGHTINGS, KNIGHT_WHITE_WEIGHTINGS);
        
    	COMBINED_PIECE_SQUARE_TABLES[Piece.BLACK_PAWN] = createCombinedTable(PAWN_BLACK_WEIGHTINGS, PAWN_BLACK_ENDGAME_WEIGHTINGS);
    	COMBINED_PIECE_SQUARE_TABLES[Piece.BLACK_KING] = createCombinedTable(KING_BLACK_MIDGAME_WEIGHTINGS, KING_BLACK_ENDGAME_WEIGHTINGS);
    	COMBINED_PIECE_SQUARE_TABLES[Piece.BLACK_QUEEN] = createCombinedTable(ZERO_WEIGHTING, ZERO_WEIGHTING);
    	COMBINED_PIECE_SQUARE_TABLES[Piece.BLACK_ROOK] = createCombinedTable(ROOK_BLACK_WEIGHTINGS, ZERO_WEIGHTING);
    	COMBINED_PIECE_SQUARE_TABLES[Piece.BLACK_BISHOP] = createCombinedTable(ZERO_WEIGHTING, ZERO_WEIGHTING);
    	COMBINED_PIECE_SQUARE_TABLES[Piece.BLACK_KNIGHT] = createCombinedTable(KNIGHT_BLACK_WEIGHTINGS, KNIGHT_BLACK_WEIGHTINGS);
    }
			
	int position;
	int positionEndgame;
	
	int combinedPosition;
	
	@BeforeEach
	public void setUp() throws Exception {
		position = 0;
		positionEndgame = 0;
		combinedPosition = 0;
	}
	
	@Test
	void newVersion() {
		int [] pieces = { WHITE_KING, WHITE_KNIGHT, WHITE_PAWN, BLACK_KING, BLACK_KNIGHT, BLACK_PAWN };
		int count = 1;//30000;
		while (count > 0) {
			for (int originBitOffset = 0; originBitOffset < 64; originBitOffset++) {
				for (int targetBitOffset = 0; targetBitOffset < 64; targetBitOffset++) {
					for (int pieceToMove : pieces) {
						// addition
						int x = combinedPosition;
						int y = COMBINED_PIECE_SQUARE_TABLES[pieceToMove][targetBitOffset];
						int s = (x & 0x7FFF_7FFF) + (y & 0x7FFF_7FFF);
						combinedPosition = ((x ^ y) & 0x8000_8000) ^ s;
						// subtraction
						x = combinedPosition;
						y = COMBINED_PIECE_SQUARE_TABLES[pieceToMove][originBitOffset];
						int d = (x | 0x8000_8000) - (y & 0x7FFF_7FFF);
						combinedPosition = ((x ^ y) | 0x7FFF_7FFF) ^ (~d);
					}
				}
				System.out.print(String.format("pos=%d eg_pos=%d\n", (short)(combinedPosition & 0xFFFF), combinedPosition >> 16));
			}
			count--;
		}
	}
	
	@Test
	void oldVersion() {
		int [] pieces = { WHITE_KING, WHITE_KNIGHT, WHITE_PAWN, BLACK_KING, BLACK_KNIGHT, BLACK_PAWN };
		int count = 1; //30000;
		while (count > 0) {
			for (int originBitOffset = 0; originBitOffset < 64; originBitOffset++) {
				for (int targetBitOffset = 0; targetBitOffset < 64; targetBitOffset++) {
					for (int pieceToMove : pieces) {
						position -= PIECE_SQUARE_TABLES[pieceToMove][originBitOffset];
						position += PIECE_SQUARE_TABLES[pieceToMove][targetBitOffset];
						positionEndgame -= ENDGAME_PIECE_SQUARE_TABLES[pieceToMove][originBitOffset];
						positionEndgame += ENDGAME_PIECE_SQUARE_TABLES[pieceToMove][targetBitOffset];
					}
				}
				System.out.print(String.format("pos=%d eg_pos=%d\n", position, positionEndgame));
			}
			count--;
		}
	}
	
}
